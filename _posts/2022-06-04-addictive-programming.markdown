---
layout: post
title: "Addictive Programming"
categories: [test driven design, TDD, clojure, ]
mathjax: true
# assets: "/assets/plotly-angular-toward-rest"
# post_series: "angular-plotly"
# repo_url: "https://github.com/mrgne1/toward-rest.git"
# repo_name: "Toward Rest"
---

Lately I've been watching a *lot* of YouTube's programming videos. Videos about architecture, programming styles and frameworks. Since my current job is 'finding a job,' I'm sending out applications, waiting for responses, solving code problems and doing interviews. In between all that, I have free 'study time' available for watching YouTube videos. 

I've found that the [NDC Conference's YouTube Channel](https://www.youtube.com/c/NDCConferences) to be a bingeble source of videos. In particular, the presentations of Dylan Beattie ([Rockstar Programmer](https://codewithrockstar.com/)) all amazing. His video *[The Art of Code](https://www.youtube.com/watch?v=6avJHaC3C2U)* is something every programmer would enjoy. *The Art of Code* is enjoyable even if you don't understand the programming. Watching Dylan Beattie's coverage of REST APIs in [The Rest of ReST](https://www.youtube.com/watch?v=g8E1B7rTZBI&t=1s) was a clarifying experience for me. There is so much confusion around what REST is. Having read the originating work on REST, [Roy Fielding's paper](https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm), I found it hard to parse out what REST was. That paper has in-group jargon and bad images, not helpful. Dylan clears away the muck in *The Rest of ReST*. He covers what a REST API is and where those REST APIs in the wild fall short. 

In my caffine-fueled programming video binge-a-thon YouTube recommended [Robert C. Martin Effective Estimation (or: How not to Lie)](https://www.youtube.com/watch?v=eisuQefYw_o). The name tickled that part of my brain that likes hard-n-fuzzy science, dealing with the unknowns in a rational manner. Robert C. Martin (Uncle Bob) talks about estimating development times for programming, a useful skill for programmers. Somewhere in that lecture (or was it another video) Uncle Bob mentions this guy Rich Hickey. Uncle Bob mentions that Rich has some 'interesting' ideas about programming. Very mysterious. That little comment led me to watch a series of videos by Rich Hickey. I had to know what were these 'interesting' ideas about programming.

Rich Hickey doesn't just have 'interesting' ideas about programming, he has strong opinions on programming. *Strong* opinions. For one thing Rich likes Lispy languages, citing his own experience and the adage "Every complicated C program has an elegant Lisp program inside." Rich also dislikes Object Oriented Programming favoring a *Data First* approach. It's not that He thinks objects don't have their uses, just that those uses are very limited. Rich took these opions and wrote his own language: [Clojure](https://clojure.org/).
These opinions of Rich resonated with me. At least that OOP one, my experience with Lisp is limited. Now I'm on the path to becoming a [Clojurist, Brave and True](https://www.braveclojure.com/). If your interest is piqued check out [Simple Made Easy](https://www.youtube.com/watch?v=LKtk3HCgTa8) and [Rich Hickey on Clojure.spec](https://www.youtube.com/watch?v=B_Farscj0hY).

My pursuit of Clojure excellence brought me right back to Uncle Bob and his obsession with clean code. If you're not aware Robert C. Martin is one of the authors of the [Agile Manifesto](https://agilemanifesto.org/) and advocates for clean code and the programming discipline. This notion of a programming discipline appeals to me so much. A programmer doesn't just 'write programs.' A programmer is a professional who follows a discipline. Uncle Bob expounds on his philosophy in six *Coding a Better World Together* lessons: [lesson 1](https://www.youtube.com/watch?v=7EmboKQH8lM), [lesson 2](https://www.youtube.com/watch?v=2a_ytyt9sf8), [lesson 3](https://www.youtube.com/watch?v=Qjywrq2gM8o), [lesson 4](https://www.youtube.com/watch?v=58jGpV2Cg50), [lesson 5](https://www.youtube.com/watch?v=sn0aFEMVTpA), [lesson 6](https://www.youtube.com/watch?v=l-gF0vDhJVI). It is the most complete coverage of Uncle Bob's philosopy. You should watch the entire series. I should watch the series again. This guy is a genius. In particular, one segment from lesson 4 really sticks out for me. It is the [Test Driven Development Demo](https://www.youtube.com/watch?v=58jGpV2Cg50&t=2628s) segment. In that segment Uncle Bob walks through the process of developing a stack using TDD. It shows the whole frustrating back-and-forth non-intuitive one-line-at-a-time process. Surprisingly at the end Uncle Bob says He enjoys this process.

He enjoys this process? The frustrating back-and-forth non-intuitive one-line-at-a-time process? Such a provocative statement needs to be investigated. So, I went back to those coding problems I've been working on and re-solved them in Clojure with TDD. And. He. Was. Right. Uncle Bob was right. Not only is TDD enjoyable, it is downright addictive. I wake up in the morning wanting write some code. I'll sit down to do a little bit of coding and then get up 3 hours later, wondering where the time went. I'm missing meals and staying up way to late. I haven't had this much fun programming since I discovered programming in highschool.

So go watch *Coding a Better World Together*, all 8 hours, start doing TDD, become a professional, disciplined programmer. You'll love it.